/*
 * generated by Xtext 2.20.0
 */
package org.xtext.thphr16.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import javax.swing.JOptionPane
import org.xtext.thphr16.mathinterpreteer.MathExp
import org.xtext.thphr16.mathinterpreteer.Exp
import org.xtext.thphr16.mathinterpreteer.Plus
import org.xtext.thphr16.mathinterpreteer.Minus
import org.xtext.thphr16.mathinterpreteer.Mult
import org.xtext.thphr16.mathinterpreteer.Div
import org.xtext.thphr16.mathinterpreteer.Numb
import org.xtext.thphr16.mathinterpreteer.Parenthesis

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathinterpreteerGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression = " + math.display)
		JOptionPane.showMessageDialog(null, "The result of " + math.display + " is " + result, "Math Language", JOptionPane.INFORMATION_MESSAGE)
	}

	// Compute function: computes value of expression
	def int compute(MathExp math) {
		math.exp.computeExp
	}

	def dispatch int computeExp(Exp exp) {
		switch (exp) {
			Plus: exp.left.computeExp + exp.right.computeExp
			Minus: exp.left.computeExp - exp.right.computeExp
			Mult: exp.left.computeExp * exp.right.computeExp
			Div: exp.left.computeExp / exp.right.computeExp
			default: throw new IllegalArgumentException('''Unexpected expression «exp.class.name»''')
		}

	}

	def dispatch int computeExp(Numb num) {
		num.value
	}

	def dispatch int computeExp(Parenthesis parenthesis) {
		parenthesis.exp.computeExp
	}

	// Display function: show complete syntax tree

	def CharSequence display(MathExp math) '''«math.exp.displayExp»'''

	def dispatch CharSequence displayExp(Plus x) '''(«x.left.displayExp»+«x.right.displayExp»)'''

	def dispatch CharSequence displayExp(Minus x) '''(«x.left.displayExp»-«x.right.displayExp»)'''

	def dispatch CharSequence displayExp(Mult x) '''(«x.left.displayExp»*«x.right.displayExp»)'''

	def dispatch CharSequence displayExp(Div x) '''(«x.left.displayExp»/«x.right.displayExp»)'''

	def dispatch CharSequence displayExp(Numb x) '''«x.value»'''

	def dispatch CharSequence displayExp(Parenthesis x) '''(«x.exp.displayExp»)'''

}
